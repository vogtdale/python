virtualenv
virtualenv est un outil pour créer des environnements virtuels Python isolés. virtualenv crée un dossier qui contient tous les exécutables nécessaires pour utiliser les paquets qu’un projet Python pourrait nécessiter.

10.mysql useful commandes
$ sudo find /opt/lampp -name "*.sock"
$ which mysql_config
$ sudo service mysql start
$ sudo apt-get install default-libmysqlclient-dev
$  pip install --only-binary :all: mysqlclient


'HOST': '/opt/lampp/var/mysql/mysql.sock', dans djangoapp.settings


sudo apt-get update && upgrade && python3 && python3-pip

1.Installez virtualenv via pip:
$ pip3 install virtualenv

Usage basique
Créer un environnement virtuel pour un projet:

$ cd my_project_folder
$ python3 -m virtualenv Env

virtualenv Env créera un dossier dans le répertoire courant qui contiendra les fichiers exécutables Python, et une copie de la bibliothèque ``pip que vous pouvez utiliser pour installer d’autres paquets. Le nom de l’environnement virtuel (dans ce cas, c’était venv) peut être n’importe quoi. Omettre le nom placera les fichiers dans le répertoire courant à la place.

Cela crée une copie de Python selon le répertoire où vous avez exécuté la commande, en le plaçant dans un dossier nommé Env.

2.Pour commencer à utiliser l’environnement virtuel, il doit être activé:

$ source Env/bin/activate

3.Si vous avez terminé de travailler dans l’environnement virtuel pour le moment, vous pouvez le désactiver:

$ deactivate

Cela vous fait revenir à l’interpréteur par défaut Python du système, avec toutes ses bibliothèques installées.

Pour supprimer une environnement virtuel, supprimez juste son dossier. (Dans ce cas, ce serait rm -rf Env

4.install django in Env

$ pip3 install django

5. create folder projects in Env

mkdir projects
cd projects

$ django-admin statrproject nameofProject in Projects directory

6. start server 

$ cd nameofProject
$ python manage.py runserver

